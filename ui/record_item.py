"""–í–∏–¥–∂–µ—Ç –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤."""

from __future__ import annotations

import os
from PyQt6.QtWidgets import QFrame, QHBoxLayout, QLabel, QPushButton, QMessageBox

from style import LABEL_TEXT
from .utils import open_in_folder, open_file


class RecordItem(QFrame):
    """–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ –≤—Å–µ–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""

    def __init__(self, path: str, settings, transcribe_cb=None, parent=None) -> None:
        super().__init__(parent)
        self.path = path
        self._settings = settings
        self._transcribe_cb = transcribe_cb
        self._txt_path = self._calc_transcript_path(path)
        self.setFixedHeight(48)

        # --- –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ ---
        self.setStyleSheet(
            f"""
            QFrame {{
                background: #222A36;
                border-radius: 12px;
            }}
            QLabel {{ color: {LABEL_TEXT}; font-size: 15px; }}
            QPushButton {{
                background: #323B4A;
                color: {LABEL_TEXT};
                border: none;
                border-radius: 8px;
                font-size: 16px;
                padding-bottom: 2px;
            }}
            QPushButton:hover {{ background: #48516B; }}
            """
        )

        # --- –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
        hbox = QHBoxLayout(self)
        hbox.setContentsMargins(16, 8, 16, 8)
        hbox.setSpacing(12)

        self.name_lbl = QLabel(os.path.basename(path))
        hbox.addWidget(self.name_lbl, stretch=1)

        # –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
        show_btn = QPushButton("üìÇ")
        show_btn.setAccessibleName("showInFolder")
        show_btn.setFixedWidth(36)
        show_btn.clicked.connect(lambda: open_in_folder(path))
        hbox.addWidget(show_btn)

        # –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        rename_btn = QPushButton("‚úé")
        rename_btn.setAccessibleName("renameFile")
        rename_btn.setFixedWidth(36)
        rename_btn.clicked.connect(self.rename_file)
        hbox.addWidget(rename_btn)

        # –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.setAccessibleName("deleteFile")
        delete_btn.setFixedWidth(36)
        delete_btn.clicked.connect(self.delete_file)
        hbox.addWidget(delete_btn)

        # –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        trans_btn = QPushButton("üìù")
        trans_btn.setAccessibleName("transcribeFile")
        trans_btn.setFixedWidth(36)
        trans_btn.clicked.connect(self.transcribe_file)
        hbox.addWidget(trans_btn)

        # –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞, –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.open_txt_btn = QPushButton("üìÑ")
        self.open_txt_btn.setAccessibleName("openTranscript")
        self.open_txt_btn.setFixedWidth(36)
        self.open_txt_btn.clicked.connect(self.open_transcript)
        self.open_txt_btn.setVisible(os.path.exists(self._txt_path))
        hbox.addWidget(self.open_txt_btn)

    # ------------------------------------------------------------------
    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ------------------------------------------------------------------
    def _calc_transcript_path(self, audio_path: str) -> str:
        folder = self._settings.transcript_folder()
        if not folder:
            folder = os.path.dirname(audio_path)
        base = os.path.splitext(os.path.basename(audio_path))[0] + ".txt"
        return os.path.join(folder, base)

    def transcript_path(self) -> str:
        return self._txt_path

    def set_transcript_path(self, path: str) -> None:
        self._txt_path = path
        self.open_txt_btn.setVisible(os.path.exists(path))

    def open_transcript(self) -> None:
        open_file(self._txt_path)

    def rename_file(self) -> None:
        from PyQt6.QtWidgets import QInputDialog

        folder = os.path.dirname(self.path)
        current_name = os.path.basename(self.path)
        new_name, ok = QInputDialog.getText(self, "Rename", "New name:", text=current_name)
        if ok and new_name:
            if not new_name.lower().endswith(os.path.splitext(current_name)[1]):
                new_name += os.path.splitext(current_name)[1]
            new_path = os.path.join(folder, new_name)
            try:
                os.rename(self.path, new_path)
            except OSError:
                return
            old_path = self.path
            self.path = new_path

            # –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–∞–∫–∂–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            old_txt = self._calc_transcript_path(old_path)
            new_txt = self._calc_transcript_path(new_path)
            if os.path.exists(old_txt):
                try:
                    os.rename(old_txt, new_txt)
                except OSError:
                    pass
            self.set_transcript_path(new_txt)
            self.name_lbl.setText(new_name)
            records = self._settings.records()
            for i, p in enumerate(records):
                if p == old_path:
                    records[i] = new_path
                    break
            self._settings.set_records(records)

    def delete_file(self) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫."""
        reply = QMessageBox.question(
            self,
            "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
        )
        if reply == QMessageBox.StandardButton.Yes:
            try:
                os.remove(self.path)
            except OSError:
                pass
            txt = self._calc_transcript_path(self.path)
            if os.path.exists(txt):
                try:
                    os.remove(txt)
                except OSError:
                    pass
            records = [p for p in self._settings.records() if p != self.path]
            self._settings.set_records(records)
            self.setParent(None)
            self.deleteLater()

    def transcribe_file(self) -> None:
        """–ü–µ—Ä–µ–¥–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –∫–æ–ª–±—ç–∫."""
        if self._transcribe_cb:
            self._transcribe_cb(self.path, self)
